/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Meme } from "./Meme";
import { MemeCountArgs } from "./MemeCountArgs";
import { MemeFindManyArgs } from "./MemeFindManyArgs";
import { MemeFindUniqueArgs } from "./MemeFindUniqueArgs";
import { CreateMemeArgs } from "./CreateMemeArgs";
import { UpdateMemeArgs } from "./UpdateMemeArgs";
import { DeleteMemeArgs } from "./DeleteMemeArgs";
import { DiscussionFindManyArgs } from "../../discussion/base/DiscussionFindManyArgs";
import { Discussion } from "../../discussion/base/Discussion";
import { User } from "../../user/base/User";
import { MemeService } from "../meme.service";
@graphql.Resolver(() => Meme)
export class MemeResolverBase {
  constructor(protected readonly service: MemeService) {}

  async _memesMeta(
    @graphql.Args() args: MemeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Meme])
  async memes(@graphql.Args() args: MemeFindManyArgs): Promise<Meme[]> {
    return this.service.memes(args);
  }

  @graphql.Query(() => Meme, { nullable: true })
  async meme(@graphql.Args() args: MemeFindUniqueArgs): Promise<Meme | null> {
    const result = await this.service.meme(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Meme)
  async createMeme(@graphql.Args() args: CreateMemeArgs): Promise<Meme> {
    return await this.service.createMeme({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Meme)
  async updateMeme(@graphql.Args() args: UpdateMemeArgs): Promise<Meme | null> {
    try {
      return await this.service.updateMeme({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Meme)
  async deleteMeme(@graphql.Args() args: DeleteMemeArgs): Promise<Meme | null> {
    try {
      return await this.service.deleteMeme(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Discussion], { name: "discussions" })
  async findDiscussions(
    @graphql.Parent() parent: Meme,
    @graphql.Args() args: DiscussionFindManyArgs
  ): Promise<Discussion[]> {
    const results = await this.service.findDiscussions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: Meme): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
