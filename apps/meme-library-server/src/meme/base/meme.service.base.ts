/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Meme as PrismaMeme,
  Discussion as PrismaDiscussion,
  User as PrismaUser,
} from "@prisma/client";

export class MemeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.MemeCountArgs, "select">): Promise<number> {
    return this.prisma.meme.count(args);
  }

  async memes(args: Prisma.MemeFindManyArgs): Promise<PrismaMeme[]> {
    return this.prisma.meme.findMany(args);
  }
  async meme(args: Prisma.MemeFindUniqueArgs): Promise<PrismaMeme | null> {
    return this.prisma.meme.findUnique(args);
  }
  async createMeme(args: Prisma.MemeCreateArgs): Promise<PrismaMeme> {
    return this.prisma.meme.create(args);
  }
  async updateMeme(args: Prisma.MemeUpdateArgs): Promise<PrismaMeme> {
    return this.prisma.meme.update(args);
  }
  async deleteMeme(args: Prisma.MemeDeleteArgs): Promise<PrismaMeme> {
    return this.prisma.meme.delete(args);
  }

  async findDiscussions(
    parentId: string,
    args: Prisma.DiscussionFindManyArgs
  ): Promise<PrismaDiscussion[]> {
    return this.prisma.meme
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .discussions(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.meme
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
