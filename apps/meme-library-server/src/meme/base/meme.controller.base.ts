/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MemeService } from "../meme.service";
import { MemeCreateInput } from "./MemeCreateInput";
import { Meme } from "./Meme";
import { MemeFindManyArgs } from "./MemeFindManyArgs";
import { MemeWhereUniqueInput } from "./MemeWhereUniqueInput";
import { MemeUpdateInput } from "./MemeUpdateInput";
import { DiscussionFindManyArgs } from "../../discussion/base/DiscussionFindManyArgs";
import { Discussion } from "../../discussion/base/Discussion";
import { DiscussionWhereUniqueInput } from "../../discussion/base/DiscussionWhereUniqueInput";

export class MemeControllerBase {
  constructor(protected readonly service: MemeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Meme })
  async createMeme(@common.Body() data: MemeCreateInput): Promise<Meme> {
    return await this.service.createMeme({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        url: true,
        description: true,
        tags: true,
        name: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Meme] })
  @ApiNestedQuery(MemeFindManyArgs)
  async memes(@common.Req() request: Request): Promise<Meme[]> {
    const args = plainToClass(MemeFindManyArgs, request.query);
    return this.service.memes({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        url: true,
        description: true,
        tags: true,
        name: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Meme })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async meme(
    @common.Param() params: MemeWhereUniqueInput
  ): Promise<Meme | null> {
    const result = await this.service.meme({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        url: true,
        description: true,
        tags: true,
        name: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Meme })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMeme(
    @common.Param() params: MemeWhereUniqueInput,
    @common.Body() data: MemeUpdateInput
  ): Promise<Meme | null> {
    try {
      return await this.service.updateMeme({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          url: true,
          description: true,
          tags: true,
          name: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Meme })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMeme(
    @common.Param() params: MemeWhereUniqueInput
  ): Promise<Meme | null> {
    try {
      return await this.service.deleteMeme({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          url: true,
          description: true,
          tags: true,
          name: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/discussions")
  @ApiNestedQuery(DiscussionFindManyArgs)
  async findDiscussions(
    @common.Req() request: Request,
    @common.Param() params: MemeWhereUniqueInput
  ): Promise<Discussion[]> {
    const query = plainToClass(DiscussionFindManyArgs, request.query);
    const results = await this.service.findDiscussions(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        content: true,

        user: {
          select: {
            id: true,
          },
        },

        meme: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/discussions")
  async connectDiscussions(
    @common.Param() params: MemeWhereUniqueInput,
    @common.Body() body: DiscussionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      discussions: {
        connect: body,
      },
    };
    await this.service.updateMeme({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/discussions")
  async updateDiscussions(
    @common.Param() params: MemeWhereUniqueInput,
    @common.Body() body: DiscussionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      discussions: {
        set: body,
      },
    };
    await this.service.updateMeme({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/discussions")
  async disconnectDiscussions(
    @common.Param() params: MemeWhereUniqueInput,
    @common.Body() body: DiscussionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      discussions: {
        disconnect: body,
      },
    };
    await this.service.updateMeme({
      where: params,
      data,
      select: { id: true },
    });
  }
}
